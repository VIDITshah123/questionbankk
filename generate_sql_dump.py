import sqlite3
import os

def dump_database(db_path, output_file):
    # Connect to the SQLite database
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row  # This enables column access by name
    cursor = conn.cursor()
    
    # Open the output file
    with open(output_file, 'w', encoding='utf-8') as f:
        # Write the header
        f.write("-- SQL Dump generated by generate_sql_dump.py\n")
        f.write(f"-- Source database: {os.path.basename(db_path)}\n\n")
        
        # Get the list of tables
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]
        
        # For each table, get the schema and data
        for table in tables:
            if table == 'sqlite_sequence':
                continue  # Skip sqlite_sequence table
                
            # Get the table creation SQL
            cursor.execute(f"SELECT sql FROM sqlite_master WHERE type='table' AND name=?", (table,))
            create_table_sql = cursor.fetchone()[0]
            
            # Write the table creation SQL
            f.write(f"--\n-- Table structure for table `{table}`\n--\n\n")
            f.write(f"{create_table_sql};\n\n")
            
            # Get all indexes for this table
            cursor.execute("SELECT name, sql FROM sqlite_master WHERE type='index' AND tbl_name=? AND sql IS NOT NULL", (table,))
            indexes = cursor.fetchall()
            
            # Write the index creation SQL
            if indexes:
                f.write(f"--\n-- Indexes for table `{table}`\n--\n\n")
                for idx in indexes:
                    f.write(f"{idx['sql']};\n")
                f.write("\n")
            
            # Get the data
            cursor.execute(f"SELECT * FROM {table}")
            rows = cursor.fetchall()
            
            if rows:  # Only write data if the table is not empty
                f.write(f"--\n-- Data for table `{table}`\n--\n\n")
                
                # Get column names
                columns = [description[0] for description in cursor.description]
                
                # Generate and write INSERT statements
                for row in rows:
                    values = []
                    for value in row:
                        if value is None:
                            values.append('NULL')
                        elif isinstance(value, (int, float)):
                            values.append(str(value))
                        else:
                            # Escape single quotes by doubling them
                            value_str = str(value).replace("'", "''")
                            values.append(f"'{value_str}'")
                    
                    # Create the INSERT statement
                    columns_str = ', '.join(f'`{col}`' for col in columns)
                    values_str = ', '.join(values)
                    f.write(f"INSERT INTO `{table}` ({columns_str}) VALUES ({values_str});\n")
                
                f.write("\n")
    
    print(f"SQL dump created successfully: {output_file}")

if __name__ == "__main__":
    db_path = os.path.join('db', 'employdex-base.db')
    output_file = 'base_v2.sql'
    
    if not os.path.exists(db_path):
        print(f"Error: Database file not found at {db_path}")
    else:
        dump_database(db_path, output_file)
